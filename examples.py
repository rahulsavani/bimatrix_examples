"""
Method to generate bimatrix games and their extreme equilibria as test cases
These examples are either hardcoded, or based on known constructions (rather than computed)
Payoffs are computed from the bimatrix and equilibrium mixed strategy profiles using get_payoffs
"""

import sys, os
import numpy as np
from numpy import matlib
from itertools import chain, combinations, product
from fractions import Fraction
import string

def get_payoffs(A,B,eq1,eq2):
    """
    compute payoffs from bimatrix and extreme equilibria
    assumes:    A and B are numpy arrays
                eq1 and eq2 are lists of numpy arrays
    """
    pay1 = [e1.T.dot(A).dot(e2) for e1,e2 in zip(eq1,eq2)]
    pay2 = [e1.T.dot(B).dot(e2) for e1,e2 in zip(eq1,eq2)]
    return pay1, pay2


def write_setnash_input(fname,A,B):

    with open(os.path.join("tmp",fname),'w') as f:
        f.write(" ".join([str(a) for a in A.shape]))
        f.write("\n")
        f.write("\n")
        np.savetxt(f, A, fmt='%d', delimiter=' ')
        f.write("\n")
        np.savetxt(f, B, fmt='%d', delimiter=' ')

def print_games(A,B):
    """
    print A and B to stdout
    """
    print "A ="
    np.savetxt(sys.stdout, A, fmt='%d', delimiter=' ')
    print "B ="
    np.savetxt(sys.stdout, B, fmt='%d', delimiter=' ')

def all_zero(dimension=3,debug=False):
    """
    creates a coordination game where both players' payoff matrices
    are identity matrices
    """
    fname = 'all_zero_' + str(dimension) + '.txt'

    A = np.zeros((dimension,dimension),dtype=int)
    B = np.zeros((dimension,dimension),dtype=int)

    # the set of extreme equilibria is the product of all unit vectors
    unit_vectors = []
    for i in range(1,dimension+1):
        unit_vectors.append([Fraction(numerator=1,denominator=1) if x == i else Fraction(0) for x in range(1,dimension+1)])

    temp = list(product(unit_vectors,unit_vectors))
    eq1,eq2 = zip(*temp) 

    if debug:
        print_games(A,B)
        print eq1, eq2
    
    write_setnash_input(fname,A,B)
    return {'fname': fname, 'A': A, 'B': B, 'e1': eq1, 'e2': eq2}

def coordination(dimension=3,debug=False):
    """
    creates a coordination game where both players' payoff matrices
    are identity matrices
    """
    fname = 'coordination_' + str(dimension) + '.txt'

    A = np.eye(dimension,dtype=int)
    B = np.eye(dimension,dtype=int)

    def powerset(iterable):
        "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
        s = list(iterable)
        return chain.from_iterable(combinations(s, r) for r in range(1,len(s)+1))
  
    eq1 = []
    # eq1 is all the uniform mixtures over pure strategies
    pure_strats = range(1,dimension+1)
    a = powerset(pure_strats) # without empty set
    
    while(True):
        try:
            s = a.next()
            x = [Fraction(numerator=1,denominator=len(s)) if (i+1) in s else Fraction(0) for i in range(dimension)]
            eq1.append(x)
        except StopIteration:
            break
       
    eq2 = eq1

    if debug:
        print_games(A,B)
        print eq1, eq2
    
    write_setnash_input(fname,A,B)
    return {'fname': fname, 'A': A, 'B': B, 'e1': eq1, 'e2': eq2}

def hide_and_seek(dimension=3,debug=False):
    """
    creates a coordination game where both players' payoff matrices
    are identity matrices
    """
    fname = 'hide_and_seek' + str(dimension) + '.txt'
       
    A = np.eye(dimension,dtype=int)
    A = 2*A - 1
    B = -A

    eq1 = []
    # eq1 is the single uniform completely mixed strategy
    x = [Fraction(numerator=1,denominator=dimension) for i in range(dimension)]
    eq1.append(x)
    eq2 = eq1

    if debug:
        print_games(A,B)
        print eq1, eq2
    
    write_setnash_input(fname,A,B)
    return {'fname': fname, 'A': A, 'B': B, 'e1': eq1, 'e2': eq2}

def dual_cyclic_6x6_75(debug=False):
    """ 
    6x6 example of the construction of von Stengel 
    
    B. von Stengel (1999), New maximal numbers of equilibria in bimatrix games. Discrete and Computational Geometry 21, 557-568.

    this game has a 75 equilibria

    the underlying polytopes are dual cyclic
    """

    fname = 'dual_cyclic_6x6_75eq.txt'

    A = np.array([ 
    [-81,36,-126,126,-36,90],
    [-180,72,-333,297,-153,270],
    [20,-3,42,-33,17,-30],
    [-30,17,-33,42,-3,20],
    [270,-153,297,-333,72,-180],
    [90,-36,126,-126,36,-81],
    ])

    B = np.array([ 
    [72,36,17,-3,-36,-153],
    [-180,-81,-30,20,90,270],
    [297,126,42,-33,-126,-333],
    [-333,-126,-33,42,126,297],
    [270,90,20,-30,-81,-180],
    [-153,-36,-3,17,36,72],
    ])

    temp = [(['1/30','1/6','3/10','3/10','1/6','1/30'],['1/6','1/30','3/10','3/10','1/30','1/6']),
        (['0','0','1/33','5/33','4/11','5/11'],['0','0','5/33','1/33','5/11','4/11']),
        (['1/128','0','0','7/64','47/128','33/64'],['0','0','5/21','13/189','59/189','8/21']),
        (['0','0','13/189','5/21','8/21','59/189'],['0','1/128','7/64','0','33/64','47/128']),
        (['13/524','0','0','87/524','53/131','53/131'],['0','13/524','87/524','0','53/131','53/131']),
        (['10/179','39/179','60/179','50/179','20/179','0'],['20/179','0','60/179','50/179','10/179','39/179']),
        (['10/89','29/89','100/267','50/267','0','0'],['0','0','100/267','50/267','10/89','29/89']),
        (['30/197','67/197','50/197','0','0','50/197'],['0','0','53/151','93/604','87/604','53/151']),
        (['5/87','7/87','0','0','25/87','50/87'],['0','0','31/98','11/98','4/21','8/21']),
        (['0','0','0','0','4/15','11/15'],['0','0','0','0','11/15','4/15']),
        (['0','0','0','0','19/70','51/70'],['0','0','0','4/27','23/27','0']),
        (['0','1/30','0','0','3/10','2/3'],['0','0','19/42','3/14','0','1/3']),
        (['0','0','0','0','2/7','5/7'],['0','0','23/42','19/42','0','0']),
        (['0','0','4/27','0','0','23/27'],['0','0','0','0','51/70','19/70']),
        (['0','0','19/112','0','0','93/112'],['0','0','0','19/112','93/112','0']),
        (['0','5/21','2/7','0','0','10/21'],['0','0','41/90','1/4','0','53/180']),
        (['0','0','4/19','0','0','15/19'],['0','0','31/59','28/59','0','0']),
        (['0','0','19/42','23/42','0','0'],['0','0','0','0','5/7','2/7']),
        (['0','0','28/59','31/59','0','0'],['0','0','0','4/19','15/19','0']),
        (['0','9/35','16/35','2/7','0','0'],['0','0','16/35','2/7','0','9/35']),
        (['0','0','1/2','1/2','0','0'],['0','0','1/2','1/2','0','0']),
        (['0','0','3/14','19/42','1/3','0'],['1/30','0','0','0','2/3','3/10']),
        (['0','0','1/4','41/90','53/180','0'],['5/21','0','0','2/7','10/21','0']),
        (['0','9/58','10/29','10/29','9/58','0'],['9/58','0','10/29','10/29','0','9/58']),
        (['0','0','2/7','16/35','9/35','0'],['9/35','0','2/7','16/35','0','0']),
        (['0','0','11/98','31/98','8/21','4/21'],['7/87','5/87','0','0','50/87','25/87']),
        (['11/193','0','0','45/193','84/193','53/193'],['29/189','25/189','0','0','82/189','53/189']),
        (['0','0','93/604','53/151','53/151','87/604'],['67/197','30/197','0','50/197','50/197','0']),
        (['31/213','0','0','53/213','28/71','15/71'],['28/71','15/71','0','53/213','31/213','0']),
        (['87/604','53/151','53/151','93/604','0','0'],['0','50/197','50/197','0','30/197','67/197']),
        (['15/71','28/71','53/213','0','0','31/213'],['0','31/213','53/213','0','15/71','28/71']),
        (['25/189','29/189','0','0','53/189','82/189'],['0','11/193','45/193','0','53/193','84/193']),
        (['0','2/27','0','0','1/3','16/27'],['0','2/11','25/66','0','0','29/66']),
        (['0','0','0','0','33/103','70/103'],['0','19/32','13/32','0','0','0']),
        (['0','1/3','1/3','0','0','1/3'],['0','1/3','1/3','0','0','1/3']),
        (['0','0','11/39','0','0','28/39'],['0','28/39','11/39','0','0','0']),
        (['0','53/180','41/90','1/4','0','0'],['0','10/21','2/7','0','0','5/21']),
        (['0','0','31/59','28/59','0','0'],['0','15/19','4/19','0','0','0']),
        (['4/21','8/21','31/98','11/98','0','0'],['25/87','50/87','0','0','5/87','7/87']),
        (['53/193','84/193','45/193','0','0','11/193'],['53/189','82/189','0','0','25/189','29/189']),
        (['1/4','1/4','0','0','1/4','1/4'],['1/4','1/4','0','0','1/4','1/4']),
        (['0','2/13','0','0','5/13','6/13'],['5/13','6/13','0','0','0','2/13']),
        (['0','0','0','0','13/33','20/33'],['13/33','20/33','0','0','0','0']),
        (['0','29/66','25/66','0','0','2/11'],['1/3','16/27','0','0','0','2/27']),
        (['6/13','5/13','0','0','2/13','0'],['2/13','0','0','0','6/13','5/13']),
        (['2/11','0','0','25/66','29/66','0'],['2/27','0','0','0','16/27','1/3']),
        (['0','1/2','0','0','1/2','0'],['1/2','0','0','0','0','1/2']),
        (['20/33','13/33','0','0','0','0'],['0','0','0','0','20/33','13/33']),
        (['19/32','0','0','13/32','0','0'],['0','0','0','0','70/103','33/103']),
        (['0','1','0','0','0','0'],['0','0','0','0','0','1']),
        (['0','1/3','19/42','3/14','0','0'],['3/10','2/3','0','0','0','1/30']),
        (['0','0','23/42','19/42','0','0'],['2/7','5/7','0','0','0','0']),
        (['0','20/179','50/179','60/179','39/179','10/179'],['39/179','10/179','50/179','60/179','0','20/179']),
        (['0','0','50/267','100/267','29/89','10/89'],['29/89','10/89','50/267','100/267','0','0']),
        (['50/197','0','0','50/197','67/197','30/197'],['53/151','87/604','93/604','53/151','0','0']),
        (['59/189','8/21','5/21','13/189','0','0'],['47/128','33/64','0','7/64','1/128','0']),
        (['53/131','53/131','87/524','0','0','13/524'],['53/131','53/131','0','87/524','13/524','0']),
        (['82/189','53/189','0','0','29/189','25/189'],['84/193','53/193','0','45/193','11/193','0']),
        (['16/27','1/3','0','0','2/27','0'],['29/66','0','0','25/66','2/11','0']),
        (['1/3','0','0','1/3','1/3','0'],['1/3','0','0','1/3','1/3','0']),
        (['70/103','33/103','0','0','0','0'],['0','0','0','13/32','19/32','0']),
        (['28/39','0','0','11/39','0','0'],['0','0','0','11/39','28/39','0']),
        (['5/11','4/11','5/33','1/33','0','0'],['4/11','5/11','1/33','5/33','0','0']),
        (['33/64','47/128','7/64','0','0','1/128'],['8/21','59/189','13/189','5/21','0','0']),
        (['50/87','25/87','0','0','7/87','5/87'],['8/21','4/21','11/98','31/98','0','0']),
        (['2/3','3/10','0','0','1/30','0'],['1/3','0','3/14','19/42','0','0']),
        (['10/21','0','0','2/7','5/21','0'],['53/180','0','1/4','41/90','0','0']),
        (['5/7','2/7','0','0','0','0'],['0','0','19/42','23/42','0','0']),
        (['15/19','0','0','4/19','0','0'],['0','0','28/59','31/59','0','0']),
        (['51/70','19/70','0','0','0','0'],['0','23/27','4/27','0','0','0']),
        (['93/112','0','0','19/112','0','0'],['0','93/112','19/112','0','0','0']),
        (['11/15','4/15','0','0','0','0'],['4/15','11/15','0','0','0','0']),
        (['23/27','0','0','4/27','0','0'],['19/70','51/70','0','0','0','0']),
        (['0','0','13/32','0','0','19/32'],['33/103','70/103','0','0','0','0']),
        (['0','0','0','0','1','0'],['1','0','0','0','0','0'])]

    eq1 = [[Fraction(e) for e in f] for f,g in temp]
    eq2 = [[Fraction(e) for e in g] for f,g in temp]

    if debug:
        print_games(A,B)
        print eq1, eq2
    
    write_setnash_input(fname,A,B)
    return {'fname': fname, 'A': A, 'B': B, 'e1': eq1, 'e2': eq2}


def battle_of_the_sexes(debug=False):

    fname = 'battle_of_the_sexes.txt'

    A = np.array([ 
    [3,1],
    [0,2]
    ])

    B = np.array([ 
    [2,1],
    [0,3],
    ])

    temp = [
        (['1','0'],['1','0']),
        (['0','1'],['0','1']),
        (['3/4','1/4'],['1/4','3/4'])
    ]

    eq1 = [[Fraction(e) for e in f] for f,g in temp]
    eq2 = [[Fraction(e) for e in g] for f,g in temp]

    if debug:
        print_games(A,B)
        print eq1, eq2
    
    write_setnash_input(fname,A,B)
    return {'fname': fname, 'A': A, 'B': B, 'e1': eq1, 'e2': eq2}
